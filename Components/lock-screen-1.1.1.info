{"Name":"Lock Screen","Id":1351,"Alias":"lock-screen","Description":"`LockScreen` adds passcode protection to your iOS or Android apps in a few lines\r\nof code. It supports easy customization of background images, passcode validation\r\nmechanisms, and string localization.\r\n\r\n### Adding `LockScreen` to your iOS app:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic partial class AppDelegate : UIApplicationDelegate\r\n{\r\n  UIWindow window;\r\n  ...\r\n\r\n  public override bool FinishedLaunching (UIApplication app, NSDictionary options)\r\n  {\r\n    ...\r\n    Locker.Activate (window);\r\n    return true;\r\n  }\r\n\r\n  public override void DidEnterBackground (UIApplication application)\r\n  {\r\n    ...\r\n    Locker.Activate (window);\r\n  }\r\n}\r\n```  \r\n\r\n### Adding `LockScreen` to your Android app:\r\n\r\nTo add a `LockScreen` to your Android app, you can create a\r\npasscode-protected `Activity` by subclassing `PasscodeProtectedActivity`:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic class MyProtectedActivity : PasscodeProtectedActivity\r\n{\r\n  ...\r\n}\r\n```  \r\n\r\nRather than subclassing `PasscodeProtectedActivity`, you may also call\r\n`Locker.OnStart` and `Locker.OnPause` in your `OnStart` and `OnPause`\r\nmethods for each activity in your app.\r\n\r\nA final option is to manually call `Locker.Activate` whenever you\u0027d like\r\nto prompt for a passcode.\r\n\r\n*Screenshot assembled with [PlaceIt](http://placeit.breezi.com).*\r\n","Version":"1.1.1","Summary":"Add passcode protection to your app in a few lines of code.","QuickStart":"`LockScreen` adds passcode protection to your iOS or Android apps in a few lines\r\nof code. It supports easy customization of background images, passcode validation\r\nmechanisms, and string localization.\r\n\r\n## Examples\r\n\r\n### Adding `LockScreen` to your iOS app:\r\n\r\nIn order to actually prompt for a passcode, add the following lines to\r\nyour `AppDelegate`:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic partial class AppDelegate : UIApplicationDelegate\r\n{\r\n  UIWindow window;\r\n  ...\r\n\r\n  public override bool FinishedLaunching (UIApplication app, NSDictionary options)\r\n  {\r\n    ...\r\n    Locker.Activate (window);\r\n    return true;\r\n  }\r\n\r\n  public override void DidEnterBackground (UIApplication application)\r\n  {\r\n    ...\r\n    Locker.Activate (window);\r\n  }\r\n}\r\n```  \r\n\r\nThe `Activate` method checks if a passcode was set, and if it was,\r\npresents the lock screen.\r\n\r\nTo ask a user to set a passcode (usually called from you app\u0027s settings\r\nscreen):\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic override void ViewDidAppear (bool animated)\r\n{\r\n  base.ViewDidAppear (animated);\r\n\r\n  Locker.Enable (this);\r\n\r\n  // Conversely,\r\n  Locker.Disable ();\r\n}\r\n```\r\n\r\n### Adding `LockScreen` to your Android app:\r\n\r\nCreate a passcode-protected `Activity` by subclassing `PasscodeProtectedActivity`:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic class MyProtectedActivity : PasscodeProtectedActivity\r\n{\r\n  ...\r\n}\r\n```  \r\n\r\nRather than subclassing `PasscodeProtectedActivity`, you may also call\r\n`Locker.OnStart` and `Locker.OnPause` in your `OnStart` and `OnPause`\r\nmethods for each activity in your app.\r\n\r\nA final option is to manually call `Locker.Activate` whenever you\u0027d like\r\nto prompt for a passcode.\r\n\r\nEnabling or disabling the lock screen requires a `Context`:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\nLocker.Enable (context);\r\nLocker.Disable (context);\r\n```  \r\n\r\n### Customization and Localization\r\n\r\nTo customize the lock screen, first create a subclass of\r\n`DefaultSettings`:\r\n\r\n```csharp\r\nusing LockScreen;\r\n...\r\n\r\npublic class MyLockSettings : DefaultSettings\r\n{\r\n  public override void InitSettings ()\r\n  {\r\n    // Initialize default settings\r\n    base.InitSettings();\r\n\r\n    // Localized lock messages\r\n    Messages = new MyLockMessages ();\r\n    // Custom passcode validation\r\n    PasscodeValidator = new MyLockValidator ();\r\n\r\n    // Change other default settings\r\n    AutoSubmit = false;\r\n    BackgroundView = new MyLockBackground ();\r\n  }\r\n}\r\n\r\n// Tip: define a trivial subclass to make calling static\r\n// Locker\u003cT\u003e methods more succinct:\r\nclass MyLocker : Locker\u003cMyLockerSettings\u003e { }\r\n``` \r\n\r\nYou may want to use a custom passcode validator if you want to save\r\npasscodes into your own database or service for example.\r\n`DefaultPasscodeValidator` uses `NSUserDefaults` to save passcode, so\r\npasscodes are safely backed up to iCloud by default.\r\n","Hash":"c60fb2a149cb954d596772ac41b18dd4","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}